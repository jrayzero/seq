from cola.block import *
from cola.traversal import *

def _scan(item, *items):
  if staticlen(items) == 0:
    if isinstance(item, View) or isinstance(item, Block):
      return (iter(item.base),)
    elif isinstance(item, AppliedTraversal):
      return (item.do_iter(),)
    else:
      return (iter(item),)
  else:
    if isinstance(item, View) or isinstance(item, Block):
      return (iter(item.base),) + _scan(*items)
    elif isinstance(item, AppliedTraversal):
      return (item.do_iter(),) + _scan(*items)
    else:
      return (iter(item),) + _scan(*items)

# users should utilize scan for iteration on blocks and views. Multidim just uses __iter__, but users
# shouldn't have to touch that part.
# Using scan makes it easier to identify "interesting" loop use cases in the compiler
def scan(item, *items):
  if staticlen(items) == 0:
    if isinstance(item, View) or isinstance(item, Block):
      for i in item.base:
        yield i
    elif isinstance(item, AppliedTraversal):
      for i in item.do_iter():
        yield i
    else:
      for i in item:
        yield i
  else:
    iters = _scan(item, *items)
    done = False
    while not done:
      for i in iters:
        if i.done():
          done = True
      if not done:
        yield tuple(View(i.next()) for i in iters)
    for i in iters:
      i.destroy()
