from cola.block import *

def six_tap_filter(a,b,c,d,e,f):
  return (a + f - 5*(d+e) + 20*(c+d))//32

def bilinear_filter(a,b):
  return (a+b)//2

# TODO don't need to clamp every access, so can get rid of some overhead (or just deal with it in the compiler).
def interpolate_quarter_pel_6tap_bi(mb, six_tap_filter_func=six_tap_filter, bilinear_filter_func=bilinear_filter):
  quarter = mb.set_density(4,4)
  quarter[::4,::4] = mb
  # Half pel
  # horizontal
  for hpel in quarter[::4,2::4]:
    hpel[0] = six_tap_filter_func(hpel.aclamp(0,-10), hpel.aclamp(0,-6), hpel.aclamp(0,-2), 
                                  hpel.aclamp(0,2), hpel.aclamp(0,6), hpel.aclamp(0,10))
  # vertical
  for hpel in quarter[2::4,::4]:
    hpel[0] = six_tap_filter_func(hpel.aclamp(-10,0), hpel.aclamp(-6,0), hpel.aclamp(-2,0), 
                                  hpel.aclamp(2,0), hpel.aclamp(6,0), hpel.aclamp(10,0))
  # half pels from the diagonal half pels
  for hpel in quarter[2::4,2::4]:
    hpel[0] = six_tap_filter_func(hpel.aclamp(0,-10), hpel.aclamp(0,-6), hpel.aclamp(0,-2), 
                                  hpel.aclamp(0,2), hpel.aclamp(0,6), hpel.aclamp(0,10))
  # Quarter pel
  # horizontal
  for qpel in quarter[::2,1::2]:
    qpel[0] = bilinear_filter_func(qpel.aclamp(0,-1), qpel.aclamp(0,1))

  # vertical 
  for qpel in quarter[1::2,::2]:
    qpel[0] = bilinear_filter_func(qpel.aclamp(-1,0), qpel.aclamp(1,0))

  # quarter pels from diagonal half pels
  for qpel in quarter[1::2,1::2]:
    qpel[0] = bilinear_filter_func(qpel.aclamp(1,-1), qpel.aclamp(-1,1))

  return quarter

